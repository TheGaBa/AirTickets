//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           6.1.0+gd30fc5741e
//       
//       Command:
//           LottieGen -Language CSharp -InputFile Airplane.json
//       
//       Input file:
//           Airplane.json (16871 bytes created 23:58+02:00 Jan 20 2021)
//       
//       Invoked on:
//           ALIENWARE @ 23:59+02:00 Jan 20 2021
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    86 |
// |--------------------------+-------|
// | Animators                |     2 |
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     1 |
// | CompositionSpriteShapes  |    14 |
// |--------------------------+-------|
// | Brushes                  |     7 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedVisuals
{
    // Name:        Comp 1
    // Frame rate:  30 fps
    // Frame count: 90
    // Duration:    3000.0 mS
    sealed class Airplane : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
    {
        // Animation duration: 3.000 seconds.
        internal const long c_durationTicks = 30000000;

        // Theme property: BackgroundColor.
        internal static readonly Color c_themeBackgroundColor = Color.FromArgb(0xFF, 0x00, 0xD1, 0xC1);

        // Theme property: HighlightColor.
        internal static readonly Color c_themeHighlightColor = Color.FromArgb(0xFF, 0x00, 0x7A, 0x87);

        // Theme property: TextColor.
        internal static readonly Color c_themeTextColor = Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF);

        CompositionPropertySet _themeProperties;
        Color _themeBackgroundColor = c_themeBackgroundColor;
        Color _themeHighlightColor = c_themeHighlightColor;
        Color _themeTextColor = c_themeTextColor;

        // Theme properties.
        public Color BackgroundColor
        {
            get => _themeBackgroundColor;
            set
            {
                _themeBackgroundColor = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("BackgroundColor", ColorAsVector4((Color)_themeBackgroundColor));
                }
            }
        }

        public Color HighlightColor
        {
            get => _themeHighlightColor;
            set
            {
                _themeHighlightColor = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("HighlightColor", ColorAsVector4((Color)_themeHighlightColor));
                }
            }
        }

        public Color TextColor
        {
            get => _themeTextColor;
            set
            {
                _themeTextColor = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("TextColor", ColorAsVector4((Color)_themeTextColor));
                }
            }
        }

        static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties is null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("BackgroundColor", ColorAsVector4((Color)BackgroundColor));
                _themeProperties.InsertVector4("HighlightColor", ColorAsVector4((Color)HighlightColor));
                _themeProperties.InsertVector4("TextColor", ColorAsVector4((Color)TextColor));
            }
            return _themeProperties;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (AnimatedVisual.IsRuntimeCompatible())
            {
                return
                    new AnimatedVisual(
                        compositor
                        );
            }

            return null;
        }

        sealed class AnimatedVisual : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 30000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_AlmostDarkSlateGray_FF475562;
            CompositionColorBrush _colorBrush_AlmostSteelBlue_FF2D95C3;
            CompositionColorBrush _colorBrush_AlmostYellowGreen_FF90CD4A;
            ContainerVisual _root;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 7 Offset:<433.229, 297.9>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_00()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 41.3040009F));
                    builder.AddCubicBezier(new Vector2(-5.71199989F, 47.0299988F), new Vector2(-14.9449997F, 47.0299988F), new Vector2(-20.6560001F, 41.3040009F));
                    builder.AddLine(new Vector2(-41.3110008F, 20.6490002F));
                    builder.AddCubicBezier(new Vector2(-47.0369987F, 14.9370003F), new Vector2(-47.0369987F, 5.69000006F), new Vector2(-41.3110008F, -0.00700000022F));
                    builder.AddLine(new Vector2(0.00100000005F, -41.3180008F));
                    builder.AddCubicBezier(new Vector2(5.71299982F, -47.0299988F), new Vector2(14.9449997F, -47.0299988F), new Vector2(20.6560001F, -41.3180008F));
                    builder.AddLine(new Vector2(41.3110008F, -20.6630001F));
                    builder.AddCubicBezier(new Vector2(47.0379982F, -14.9650002F), new Vector2(47.0379982F, -5.71799994F), new Vector2(41.3110008F, -0.00700000022F));
                    builder.AddLine(new Vector2(0F, 41.3040009F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 6 Offset:<214.108, 78.784>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_01()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-0.00100000005F, 41.3040009F));
                    builder.AddCubicBezier(new Vector2(-5.71299982F, 47.0299988F), new Vector2(-14.9449997F, 47.0299988F), new Vector2(-20.6560001F, 41.3040009F));
                    builder.AddLine(new Vector2(-41.3110008F, 20.6490002F));
                    builder.AddCubicBezier(new Vector2(-47.0369987F, 14.9370003F), new Vector2(-47.0369987F, 5.69099998F), new Vector2(-41.3110008F, -0.00600000005F));
                    builder.AddLine(new Vector2(0F, -41.3180008F));
                    builder.AddCubicBezier(new Vector2(5.71199989F, -47.0299988F), new Vector2(14.9449997F, -47.0299988F), new Vector2(20.6560001F, -41.3180008F));
                    builder.AddLine(new Vector2(41.3120003F, -20.6630001F));
                    builder.AddCubicBezier(new Vector2(47.0379982F, -14.9659996F), new Vector2(47.0379982F, -5.71799994F), new Vector2(41.3120003F, -0.00700000022F));
                    builder.AddLine(new Vector2(-0.00100000005F, 41.3040009F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 5 Offset:<99.75, 412.25>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_02()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-75.5469971F, -99.75F));
                    builder.AddCubicBezier(new Vector2(-46.3310013F, -99.75F), new Vector2(85.1419983F, -85.1419983F), new Vector2(85.1419983F, -85.1419983F));
                    builder.AddCubicBezier(new Vector2(85.1419983F, -85.1419983F), new Vector2(99.75F, 46.3300018F), new Vector2(99.75F, 75.5459976F));
                    builder.AddCubicBezier(new Vector2(99.75F, 104.762001F), new Vector2(70.5339966F, 104.762001F), new Vector2(55.9259987F, 90.1539993F));
                    builder.AddCubicBezier(new Vector2(41.3180008F, 75.5459976F), new Vector2(-2.50600004F, 2.50600004F), new Vector2(-2.50600004F, 2.50600004F));
                    builder.AddCubicBezier(new Vector2(-2.50600004F, 2.50600004F), new Vector2(-75.5469971F, -41.3180008F), new Vector2(-90.1549988F, -55.9259987F));
                    builder.AddCubicBezier(new Vector2(-104.763F, -70.5339966F), new Vector2(-104.763F, -99.75F), new Vector2(-75.5469971F, -99.75F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 4 Offset:<216.611, 295.383>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_03()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-163.197998F, -216.048004F));
                    builder.AddCubicBezier(new Vector2(-119.374001F, -216.617004F), new Vector2(202.003006F, -202.009003F), new Vector2(202.003006F, -202.009003F));
                    builder.AddCubicBezier(new Vector2(202.003006F, -202.009003F), new Vector2(215.5F, 119.367996F), new Vector2(216.054993F, 163.192001F));
                    builder.AddCubicBezier(new Vector2(216.610001F, 207.016006F), new Vector2(175.707993F, 221.653F), new Vector2(159.639008F, 163.207001F));
                    builder.AddCubicBezier(new Vector2(143.570007F, 104.760002F), new Vector2(85.1380005F, -85.1439972F), new Vector2(85.1380005F, -85.1439972F));
                    builder.AddCubicBezier(new Vector2(85.1380005F, -85.1439972F), new Vector2(-118.716003F, -149.654007F), new Vector2(-163.270996F, -159.675995F));
                    builder.AddCubicBezier(new Vector2(-221.630005F, -172.794006F), new Vector2(-207.022003F, -215.479004F), new Vector2(-163.197998F, -216.048004F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 3 Offset:<286.362, 225.638>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_04()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(103.042999F, -190.690994F));
                    builder.AddCubicBezier(new Vector2(132.259003F, -219.906998F), new Vector2(205.298996F, -234.514999F), new Vector2(219.906998F, -219.906998F));
                    builder.AddCubicBezier(new Vector2(234.514999F, -205.298996F), new Vector2(219.906998F, -132.259003F), new Vector2(190.690994F, -103.042999F));
                    builder.AddCubicBezier(new Vector2(161.475006F, -73.8270035F), new Vector2(-86.8619995F, 159.901993F), new Vector2(-86.8619995F, 159.901993F));
                    builder.AddCubicBezier(new Vector2(-86.8619995F, 159.901993F), new Vector2(-181.813995F, 225.638F), new Vector2(-203.725998F, 203.725998F));
                    builder.AddCubicBezier(new Vector2(-225.638F, 181.813995F), new Vector2(-159.901993F, 86.8619995F), new Vector2(-159.901993F, 86.8619995F));
                    builder.AddCubicBezier(new Vector2(-159.901993F, 86.8619995F), new Vector2(73.8259964F, -161.475006F), new Vector2(103.042999F, -190.690994F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 2 Offset:<133.764, 378.236>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_05()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(65.7360001F, -65.7360001F));
                    builder.AddCubicBezier(new Vector2(65.7360001F, -65.7360001F), new Vector2(73.0400009F, -58.4319992F), new Vector2(7.3039999F, 7.3039999F));
                    builder.AddCubicBezier(new Vector2(-58.4319992F, 73.0400009F), new Vector2(-65.7360001F, 65.7360001F), new Vector2(-65.7360001F, 65.7360001F));
                    builder.AddCubicBezier(new Vector2(-65.7360001F, 65.7360001F), new Vector2(-73.0400009F, 58.4319992F), new Vector2(-7.3039999F, -7.3039999F));
                    builder.AddCubicBezier(new Vector2(58.4319992F, -73.0400009F), new Vector2(65.7360001F, -65.7360001F), new Vector2(65.7360001F, -65.7360001F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 1 Offset:<447.837, 64.163>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_06()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-29.2159996F, -14.6079998F));
                    builder.AddCubicBezier(new Vector2(-5.01100016F, -14.6079998F), new Vector2(14.6079998F, 5.01100016F), new Vector2(14.6079998F, 29.2159996F));
                    builder.AddLine(new Vector2(26.3670006F, 29.2159996F));
                    builder.AddCubicBezier(new Vector2(28.0319996F, 24.6140003F), new Vector2(29.2159996F, 19.7940006F), new Vector2(29.2159996F, 14.6079998F));
                    builder.AddCubicBezier(new Vector2(29.2159996F, -9.59700012F), new Vector2(9.59700012F, -29.2159996F), new Vector2(-14.6079998F, -29.2159996F));
                    builder.AddCubicBezier(new Vector2(-19.7940006F, -29.2159996F), new Vector2(-24.6299992F, -28.0330009F), new Vector2(-29.2159996F, -26.368F));
                    builder.AddLine(new Vector2(-29.2159996F, -14.6079998F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - -  Scale:0.60938,0.60938, Offset:<144, 144>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_07()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, -256F));
                    builder.AddCubicBezier(new Vector2(141.384995F, -256F), new Vector2(256F, -141.384995F), new Vector2(256F, 0F));
                    builder.AddCubicBezier(new Vector2(256F, 141.384995F), new Vector2(141.384995F, 256F), new Vector2(0F, 256F));
                    builder.AddCubicBezier(new Vector2(-141.384995F, 256F), new Vector2(-256F, 141.384995F), new Vector2(-256F, 0F));
                    builder.AddCubicBezier(new Vector2(-256F, -141.384995F), new Vector2(-141.384995F, -256F), new Vector2(0F, -256F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - -  Scale:0.60938,0.60938, Offset:<144, 144>
            CanvasGeometry Geometry_08()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-22.2509995F, -205.779999F));
                    builder.AddLine(new Vector2(-32.8199997F, -172.852005F));
                    builder.AddCubicBezier(new Vector2(-35.3779984F, -164.882996F), new Vector2(-41.7859993F, -158.744003F), new Vector2(-49.8580017F, -156.531006F));
                    builder.AddLine(new Vector2(-76.3700027F, -149.261993F));
                    builder.AddCubicBezier(new Vector2(-78.5039978F, -148.677002F), new Vector2(-80.7080002F, -148.380005F), new Vector2(-82.9209976F, -148.380005F));
                    builder.AddLine(new Vector2(-122.593002F, -148.380005F));
                    builder.AddCubicBezier(new Vector2(-126.732002F, -148.380005F), new Vector2(-130.231003F, -145.315994F), new Vector2(-130.778F, -141.214005F));
                    builder.AddLine(new Vector2(-135.328003F, -107.089996F));
                    builder.AddLine(new Vector2(-160.667999F, -105.763F));
                    builder.AddCubicBezier(new Vector2(-164.929001F, -105.540001F), new Vector2(-168.317993F, -102.108002F), new Vector2(-168.488007F, -97.8450012F));
                    builder.AddLine(new Vector2(-169.365005F, -75.8219986F));
                    builder.AddCubicBezier(new Vector2(-169.563004F, -70.862999F), new Vector2(-165.373001F, -66.8509979F), new Vector2(-160.427994F, -67.2630005F));
                    builder.AddLine(new Vector2(-143.546005F, -68.6699982F));
                    builder.AddCubicBezier(new Vector2(-139.205994F, -69.0319977F), new Vector2(-135.242004F, -71.2799988F), new Vector2(-132.703995F, -74.8190002F));
                    builder.AddLine(new Vector2(-117.091003F, -96.5950012F));
                    builder.AddLine(new Vector2(-83.697998F, -97.788002F));
                    builder.AddCubicBezier(new Vector2(-76.5559998F, -98.0429993F), new Vector2(-71.5100021F, -90.8570023F), new Vector2(-74.1029968F, -84.1969986F));
                    builder.AddCubicBezier(new Vector2(-79.9219971F, -69.2539978F), new Vector2(-79.9300003F, -67.973999F), new Vector2(-79.9300003F, -66.6600037F));
                    builder.AddCubicBezier(new Vector2(-79.9300003F, -62.0950012F), new Vector2(-76.2360001F, -58.4020004F), new Vector2(-71.6719971F, -58.4020004F));
                    builder.AddCubicBezier(new Vector2(-67.5910034F, -58.4020004F), new Vector2(-64.1959991F, -61.3699989F), new Vector2(-63.5349998F, -65.2570038F));
                    builder.AddCubicBezier(new Vector2(-62.9710007F, -67.1600037F), new Vector2(-60.4490013F, -73.7580032F), new Vector2(-57.1469994F, -82.1340027F));
                    builder.AddCubicBezier(new Vector2(-55.7680016F, -85.6320038F), new Vector2(-51.0169983F, -86.1470032F), new Vector2(-48.9449997F, -83.0090027F));
                    builder.AddLine(new Vector2(-46.8100014F, -79.7779999F));
                    builder.AddCubicBezier(new Vector2(-42.862999F, -73.8030014F), new Vector2(-35.5139999F, -71.0530014F), new Vector2(-28.6140003F, -72.9680023F));
                    builder.AddLine(new Vector2(-13.868F, -77.0599976F));
                    builder.AddCubicBezier(new Vector2(-9.75800037F, -78.1999969F), new Vector2(-6.43900013F, -81.2340012F), new Vector2(-4.93499994F, -85.2249985F));
                    builder.AddLine(new Vector2(-2.10700011F, -92.7289963F));
                    builder.AddCubicBezier(new Vector2(-0.109999999F, -98.0279999F), new Vector2(4.46299982F, -101.933998F), new Vector2(10.0089998F, -103.079002F));
                    builder.AddLine(new Vector2(19.5389996F, -105.045998F));
                    builder.AddCubicBezier(new Vector2(26.0240002F, -106.384003F), new Vector2(32.9000015F, -102.462997F), new Vector2(34.0289993F, -95.9380035F));
                    builder.AddCubicBezier(new Vector2(35.1819992F, -89.2720032F), new Vector2(30.4979992F, -83.2160034F), new Vector2(23.9909992F, -82.4700012F));
                    builder.AddLine(new Vector2(1.01199996F, -81.8529968F));
                    builder.AddCubicBezier(new Vector2(-3.66100001F, -81.7269974F), new Vector2(-7.41499996F, -77.961998F), new Vector2(-7.52600002F, -73.288002F));
                    builder.AddLine(new Vector2(-7.57800007F, -71.0879974F));
                    builder.AddCubicBezier(new Vector2(-7.61999989F, -69.3209991F), new Vector2(-6.64499998F, -67.685997F), new Vector2(-5.0710001F, -66.8830032F));
                    builder.AddLine(new Vector2(8.14299965F, -60.1409988F));
                    builder.AddCubicBezier(new Vector2(13.1730003F, -57.5750008F), new Vector2(14.8120003F, -51.1790009F), new Vector2(11.6370001F, -46.5089989F));
                    builder.AddCubicBezier(new Vector2(9.89000034F, -43.9399986F), new Vector2(6.98600006F, -42.4029999F), new Vector2(3.87899995F, -42.4029999F));
                    builder.AddLine(new Vector2(-65.814003F, -42.4029999F));
                    builder.AddCubicBezier(new Vector2(-67.6380005F, -42.4029999F), new Vector2(-69.4459991F, -42.7459984F), new Vector2(-71.1429977F, -43.4150009F));
                    builder.AddLine(new Vector2(-129.625F, -66.4530029F));
                    builder.AddCubicBezier(new Vector2(-133.953003F, -68.1579971F), new Vector2(-138.873993F, -67.2350006F), new Vector2(-142.289993F, -64.0780029F));
                    builder.AddLine(new Vector2(-197.675995F, -12.8879995F));
                    builder.AddCubicBezier(new Vector2(-202.091003F, -8.80700016F), new Vector2(-203.940002F, -2.64899993F), new Vector2(-202.503006F, 3.18899989F));
                    builder.AddLine(new Vector2(-191.242004F, 48.9360008F));
                    builder.AddCubicBezier(new Vector2(-189.503998F, 55.9970016F), new Vector2(-183.352005F, 61.0900002F), new Vector2(-176.091003F, 61.480999F));
                    builder.AddLine(new Vector2(-113.693001F, 64.8359985F));
                    builder.AddCubicBezier(new Vector2(-101.416F, 65.4960022F), new Vector2(-91.4810028F, 75.0599976F), new Vector2(-90.3529968F, 87.302002F));
                    builder.AddLine(new Vector2(-85.6200027F, 138.688995F));
                    builder.AddCubicBezier(new Vector2(-85.2659988F, 142.533005F), new Vector2(-84.2529984F, 146.240005F), new Vector2(-82.5839996F, 149.722F));
                    builder.AddCubicBezier(new Vector2(-77.3259964F, 160.690994F), new Vector2(-65.0670013F, 185.623993F), new Vector2(-58.2519989F, 194.242996F));
                    builder.AddCubicBezier(new Vector2(-49.4780006F, 205.339996F), new Vector2(-27.8610001F, 205.779999F), new Vector2(-20.5750008F, 199.145996F));
                    builder.AddLine(new Vector2(30.1590004F, 157.630997F));
                    builder.AddCubicBezier(new Vector2(34.3989983F, 153.770996F), new Vector2(37.1679993F, 148.559998F), new Vector2(37.9959984F, 142.886002F));
                    builder.AddLine(new Vector2(43.9399986F, 102.113998F));
                    builder.AddLine(new Vector2(84.2269974F, 57.7159996F));
                    builder.AddCubicBezier(new Vector2(88.151001F, 53.3899994F), new Vector2(86.3889999F, 46.757F), new Vector2(81.3949966F, 44.6139984F));
                    builder.AddLine(new Vector2(80.6729965F, 45.0979996F));
                    builder.AddCubicBezier(new Vector2(77.6169968F, 47.1459999F), new Vector2(74.0920029F, 48.3880005F), new Vector2(70.4469986F, 48.7109985F));
                    builder.AddCubicBezier(new Vector2(69.802002F, 48.7669983F), new Vector2(69.1569977F, 48.7999992F), new Vector2(68.512001F, 48.7999992F));
                    builder.AddCubicBezier(new Vector2(61.0439987F, 48.7999992F), new Vector2(54.1170006F, 45.0099983F), new Vector2(50.0929985F, 38.605999F));
                    builder.AddLine(new Vector2(19.3349991F, -10.2329998F));
                    builder.AddCubicBezier(new Vector2(16.9080009F, -14.0959997F), new Vector2(18.0690002F, -19.1930008F), new Vector2(21.9239998F, -21.6280003F));
                    builder.AddCubicBezier(new Vector2(25.8110008F, -24.0389996F), new Vector2(30.8840008F, -22.8859997F), new Vector2(33.3190002F, -19.0389996F));
                    builder.AddLine(new Vector2(64.0770035F, 29.8080006F));
                    builder.AddCubicBezier(new Vector2(65.1330032F, 31.5020008F), new Vector2(67.0039978F, 32.4210014F), new Vector2(69.0039978F, 32.2599983F));
                    builder.AddCubicBezier(new Vector2(69.8830032F, 32.1790009F), new Vector2(70.7460022F, 31.8729992F), new Vector2(71.487999F, 31.3810005F));
                    builder.AddLine(new Vector2(113.063004F, 8.59700012F));
                    builder.AddCubicBezier(new Vector2(117.396004F, 6.22200012F), new Vector2(118.543999F, 0.515999973F), new Vector2(115.464996F, -3.34899998F));
                    builder.AddCubicBezier(new Vector2(113.752998F, -5.49800014F), new Vector2(111.055F, -6.61299992F), new Vector2(108.325996F, -6.30000019F));
                    builder.AddLine(new Vector2(99.5930023F, -5.296F));
                    builder.AddCubicBezier(new Vector2(97.2470016F, -5.02600002F), new Vector2(94.8980026F, -5.77299976F), new Vector2(93.1380005F, -7.34700012F));
                    builder.AddLine(new Vector2(66.987999F, -30.7390003F));
                    builder.AddCubicBezier(new Vector2(63.5929985F, -33.7789993F), new Vector2(63.3030014F, -38.9970016F), new Vector2(66.3430023F, -42.4000015F));
                    builder.AddCubicBezier(new Vector2(69.375F, -45.8030014F), new Vector2(74.5930023F, -46.0849991F), new Vector2(78.0039978F, -43.0449982F));
                    builder.AddLine(new Vector2(101.390999F, -22.1259995F));
                    builder.AddLine(new Vector2(115.600998F, -23.7630005F));
                    builder.AddCubicBezier(new Vector2(118.544998F, -24.1259995F), new Vector2(121.463997F, -22.8360004F), new Vector2(123.213997F, -20.4319992F));
                    builder.AddLine(new Vector2(125.947998F, -16.6900005F));
                    builder.AddLine(new Vector2(139.798004F, -18.3519993F));
                    builder.AddCubicBezier(new Vector2(146.529007F, -19.1599998F), new Vector2(153.069F, -15.7729998F), new Vector2(156.294006F, -9.81000042F));
                    builder.AddLine(new Vector2(184.261993F, 41.9029999F));
                    builder.AddCubicBezier(new Vector2(186.291F, 45.6549988F), new Vector2(189.692993F, 48.4770012F), new Vector2(193.755997F, 49.776001F));
                    builder.AddLine(new Vector2(203.817001F, 53.3100014F));
                    builder.AddCubicBezier(new Vector2(203.847F, 51.6839981F), new Vector2(203.940002F, 50.0719986F), new Vector2(203.940002F, 48.4389992F));
                    builder.AddCubicBezier(new Vector2(203.940002F, -82.8580017F), new Vector2(105.080002F, -191.003998F), new Vector2(-22.2509995F, -205.779999F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    builder.BeginFigure(new Vector2(84.6900024F, -64.4660034F));
                    builder.AddCubicBezier(new Vector2(83.2789993F, -63.5060005F), new Vector2(81.6660004F, -63.0470009F), new Vector2(80.0770035F, -63.0470009F));
                    builder.AddCubicBezier(new Vector2(77.4240036F, -63.0470009F), new Vector2(74.8190002F, -64.3209991F), new Vector2(73.2300034F, -66.6839981F));
                    builder.AddLine(new Vector2(56.0279999F, -92.1439972F));
                    builder.AddCubicBezier(new Vector2(53.4720001F, -95.9179993F), new Vector2(54.4630013F, -101.055F), new Vector2(58.2459984F, -103.603996F));
                    builder.AddCubicBezier(new Vector2(62.012001F, -106.168999F), new Vector2(67.1650009F, -105.160004F), new Vector2(69.7060013F, -101.386002F));
                    builder.AddLine(new Vector2(86.9079971F, -75.9260025F));
                    builder.AddCubicBezier(new Vector2(89.4639969F, -72.1520004F), new Vector2(88.4720001F, -67.0149994F), new Vector2(84.6900024F, -64.4660034F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - -  Scale:0.60938,0.60938, Offset:<144, 144>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_09()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(102.924004F, 153.074997F));
                    builder.AddCubicBezier(new Vector2(-38.4609985F, 153.074997F), new Vector2(-153.076004F, 38.4599991F), new Vector2(-153.076004F, -102.925003F));
                    builder.AddCubicBezier(new Vector2(-153.076004F, -152.104996F), new Vector2(-139.179993F, -198.026993F), new Vector2(-115.140999F, -237.031998F));
                    builder.AddCubicBezier(new Vector2(-188.266998F, -191.962997F), new Vector2(-237.033005F, -111.172997F), new Vector2(-237.033005F, -18.9680004F));
                    builder.AddCubicBezier(new Vector2(-237.033005F, 122.417F), new Vector2(-122.417999F, 237.031998F), new Vector2(18.9669991F, 237.031998F));
                    builder.AddCubicBezier(new Vector2(111.171997F, 237.031998F), new Vector2(191.964005F, 188.266006F), new Vector2(237.033005F, 115.139F));
                    builder.AddCubicBezier(new Vector2(198.026993F, 139.179001F), new Vector2(152.104996F, 153.074997F), new Vector2(102.924004F, 153.074997F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - -  Scale:0.60938,0.60938, Offset:<144, 144>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_10()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-10.8470001F, 21.6609993F));
                    builder.AddCubicBezier(new Vector2(-12.7180004F, 21.6609993F), new Vector2(-14.6049995F, 21.0240002F), new Vector2(-16.1529999F, 19.7259998F));
                    builder.AddCubicBezier(new Vector2(-19.6450005F, 16.7910004F), new Vector2(-20.0970001F, 11.5810003F), new Vector2(-17.1609993F, 8.08899975F));
                    builder.AddLine(new Vector2(4.51599979F, -17.7169991F));
                    builder.AddCubicBezier(new Vector2(7.44299984F, -21.2010002F), new Vector2(12.6610003F, -21.6609993F), new Vector2(16.1529999F, -18.7250004F));
                    builder.AddCubicBezier(new Vector2(19.6450005F, -15.7889996F), new Vector2(20.0970001F, -10.5799999F), new Vector2(17.1609993F, -7.08799982F));
                    builder.AddLine(new Vector2(-4.51599979F, 18.7180004F));
                    builder.AddCubicBezier(new Vector2(-6.14599991F, 20.6609993F), new Vector2(-8.49199963F, 21.6609993F), new Vector2(-10.8470001F, 21.6609993F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - -  Scale:0.60938,0.60938, Offset:<144, 144>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_11()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.10599995F, -14.0290003F));
                    builder.AddLine(new Vector2(-12.4530001F, 7.86299992F));
                    builder.AddCubicBezier(new Vector2(-13.9049997F, 12.1859999F), new Vector2(-11.5740004F, 16.8700008F), new Vector2(-7.25099993F, 18.3220005F));
                    builder.AddCubicBezier(new Vector2(-6.38000011F, 18.6119995F), new Vector2(-5.49300003F, 18.7490005F), new Vector2(-4.62200022F, 18.7490005F));
                    builder.AddCubicBezier(new Vector2(-1.16999996F, 18.7490005F), new Vector2(2.04699993F, 16.5720005F), new Vector2(3.20900011F, 13.1199999F));
                    builder.AddLine(new Vector2(13.9049997F, -18.7490005F));
                    builder.AddCubicBezier(new Vector2(7.46700001F, -17.4379997F), new Vector2(1.14600003F, -15.8149996F), new Vector2(-5.10599995F, -14.0290003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - -  Scale:0.60938,0.60938, Offset:<144, 144>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_12()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(17.0779991F, 59.9249992F));
                    builder.AddLine(new Vector2(24.2240009F, -4.98899984F));
                    builder.AddCubicBezier(new Vector2(24.7950001F, -10.0839996F), new Vector2(22.9669991F, -15.1549997F), new Vector2(19.2770004F, -18.7140007F));
                    builder.AddLine(new Vector2(-24.7950001F, -59.9259987F));
                    builder.AddCubicBezier(new Vector2(-21.0470009F, -15.8430004F), new Vector2(-6.17000008F, 25.0559998F), new Vector2(17.0779991F, 59.9249992F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - -  Scale:0.60938,0.60938, Offset:<144, 144>
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_13()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(12.835F, -18.5799999F));
                    builder.AddCubicBezier(new Vector2(3.57399988F, -18.5799999F), new Vector2(-5.56400013F, -18.0620003F), new Vector2(-14.5710001F, -17.1030006F));
                    builder.AddLine(new Vector2(-15.4309998F, 2.27399993F));
                    builder.AddCubicBezier(new Vector2(-17.5919991F, 8.76599979F), new Vector2(-14.092F, 15.7819996F), new Vector2(-7.5999999F, 17.9430008F));
                    builder.AddCubicBezier(new Vector2(-6.30200005F, 18.3780003F), new Vector2(-4.97900009F, 18.5799999F), new Vector2(-3.68099999F, 18.5799999F));
                    builder.AddCubicBezier(new Vector2(1.50399995F, 18.5799999F), new Vector2(6.34299994F, 15.2989998F), new Vector2(8.06900024F, 10.1129999F));
                    builder.AddLine(new Vector2(17.5919991F, -18.4599991F));
                    builder.AddCubicBezier(new Vector2(16.0030003F, -18.4890003F), new Vector2(14.4309998F, -18.5799999F), new Vector2(12.835F, -18.5799999F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostDarkSlateGray_FF475562()
            {
                return _colorBrush_AlmostDarkSlateGray_FF475562 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x47, 0x55, 0x62));
            }

            // - Layer aggregator
            // Scale:0.60938,0.60938, Offset:<144, 144>
            CompositionColorBrush ColorBrush_AlmostLightSeaGreen_FF18A6BE()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x18, 0xA6, 0xBE));
            }

            // - Layer aggregator
            // Scale:0.60938,0.60938, Offset:<144, 144>
            CompositionColorBrush ColorBrush_AlmostMediumTurquoise_FF5CC0C9()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x5C, 0xC0, 0xC9));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 3 Offset:<286.362, 225.638>
            CompositionColorBrush ColorBrush_AlmostSilver_FFBBC8C5()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xBB, 0xC8, 0xC5));
            }

            CompositionColorBrush ColorBrush_AlmostSteelBlue_FF2D95C3()
            {
                return _colorBrush_AlmostSteelBlue_FF2D95C3 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x2D, 0x95, 0xC3));
            }

            // - Layer aggregator
            // Scale:0.60938,0.60938, Offset:<144, 144>
            CompositionColorBrush ColorBrush_AlmostYellowGreen_FF80C536()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x80, 0xC5, 0x36));
            }

            CompositionColorBrush ColorBrush_AlmostYellowGreen_FF90CD4A()
            {
                return _colorBrush_AlmostYellowGreen_FF90CD4A = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x90, 0xCD, 0x4A));
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(1173.67102F, 1093.87305F);
                result.Offset = new Vector2(-773.671021F, -693.873047F);
                result.Scale = new Vector2(0.212669998F, 0.212669998F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 7 Offset:<433.229, 297.9>
                shapes.Add(SpriteShape_00());
                // ShapeGroup: Group 6 Offset:<214.108, 78.784>
                shapes.Add(SpriteShape_01());
                // ShapeGroup: Group 5 Offset:<99.75, 412.25>
                shapes.Add(SpriteShape_02());
                // ShapeGroup: Group 4 Offset:<216.611, 295.383>
                shapes.Add(SpriteShape_03());
                // ShapeGroup: Group 3 Offset:<286.362, 225.638>
                shapes.Add(SpriteShape_04());
                // ShapeGroup: Group 2 Offset:<133.764, 378.236>
                shapes.Add(SpriteShape_05());
                // ShapeGroup: Group 1 Offset:<447.837, 64.163>
                shapes.Add(SpriteShape_06());
                result.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_45_to_405());
                var controller = result.TryGetAnimationController("RotationAngleInDegrees");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Group 7 Offset:<433.229, 297.9>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_00()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_00()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 6 Offset:<214.108, 78.784>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_01()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_01()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 5 Offset:<99.75, 412.25>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_02()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_02()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 4 Offset:<216.611, 295.383>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_03()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_03()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 3 Offset:<286.362, 225.638>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_04()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_04()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 2 Offset:<133.764, 378.236>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_05()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_05()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 1 Offset:<447.837, 64.163>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_06()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_06()));
            }

            // - Layer aggregator
            // Scale:0.60938,0.60938, Offset:<144, 144>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_07()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_07()));
            }

            // - Layer aggregator
            // Scale:0.60938,0.60938, Offset:<144, 144>
            CompositionPathGeometry PathGeometry_08()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_08()));
            }

            // - Layer aggregator
            // Scale:0.60938,0.60938, Offset:<144, 144>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_09()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_09()));
            }

            // - Layer aggregator
            // Scale:0.60938,0.60938, Offset:<144, 144>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_10()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_10()));
            }

            // - Layer aggregator
            // Scale:0.60938,0.60938, Offset:<144, 144>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_11()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_11()));
            }

            // - Layer aggregator
            // Scale:0.60938,0.60938, Offset:<144, 144>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_12()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_12()));
            }

            // - Layer aggregator
            // Scale:0.60938,0.60938, Offset:<144, 144>
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_13()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_13()));
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_00()
            {
                // Offset:<433.229, 297.9>
                var result = CreateSpriteShape(PathGeometry_00(), new Matrix3x2(1F, 0F, 0F, 1F, 433.229004F, 297.899994F), ColorBrush_AlmostDarkSlateGray_FF475562());
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_01()
            {
                // Offset:<214.108, 78.784>
                var result = CreateSpriteShape(PathGeometry_01(), new Matrix3x2(1F, 0F, 0F, 1F, 214.108002F, 78.7839966F), _colorBrush_AlmostDarkSlateGray_FF475562);
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_02()
            {
                // Offset:<99.75, 412.25>
                var result = CreateSpriteShape(PathGeometry_02(), new Matrix3x2(1F, 0F, 0F, 1F, 99.75F, 412.25F), ColorBrush_AlmostSteelBlue_FF2D95C3());
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_03()
            {
                // Offset:<216.611, 295.383>
                var result = CreateSpriteShape(PathGeometry_03(), new Matrix3x2(1F, 0F, 0F, 1F, 216.610992F, 295.382996F), _colorBrush_AlmostSteelBlue_FF2D95C3);
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_04()
            {
                // Offset:<286.362, 225.638>
                var result = CreateSpriteShape(PathGeometry_04(), new Matrix3x2(1F, 0F, 0F, 1F, 286.362F, 225.638F), ColorBrush_AlmostSilver_FFBBC8C5());
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_05()
            {
                // Offset:<133.764, 378.236>
                var result = CreateSpriteShape(PathGeometry_05(), new Matrix3x2(1F, 0F, 0F, 1F, 133.764008F, 378.235992F), _colorBrush_AlmostDarkSlateGray_FF475562);
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_06()
            {
                // Offset:<447.837, 64.163>
                var result = CreateSpriteShape(PathGeometry_06(), new Matrix3x2(1F, 0F, 0F, 1F, 447.837006F, 64.163002F), _colorBrush_AlmostDarkSlateGray_FF475562);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_07()
            {
                // Offset:<400, 400>, Rotation:-0.008102100937574169 degrees, Scale:<0.60938, 0.60938>
                var result = CreateSpriteShape(PathGeometry_07(), new Matrix3x2(0.609380007F, 0F, 0F, 0.609380007F, 400F, 400F), ColorBrush_AlmostMediumTurquoise_FF5CC0C9());
                return result;
            }

            // Layer aggregator
            // ShapeGroup: Group 6 Offset:<308.06, 207.563>
            CompositionSpriteShape SpriteShape_08()
            {
                // Offset:<431.7243, 370.48346>, Rotation:-0.008102100937574169 degrees,
                // Scale:<0.60938, 0.60938>
                var result = CreateSpriteShape(PathGeometry_08(), new Matrix3x2(0.609380007F, 0F, 0F, 0.609380007F, 431.724304F, 370.483459F), ColorBrush_AlmostYellowGreen_FF90CD4A());
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_09()
            {
                // Offset:<388.4419, 411.55872>, Rotation:-0.008102100937574169 degrees,
                // Scale:<0.60938, 0.60938>
                var result = CreateSpriteShape(PathGeometry_09(), new Matrix3x2(0.609380007F, 0F, 0F, 0.609380007F, 388.441895F, 411.558716F), ColorBrush_AlmostLightSeaGreen_FF18A6BE());
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_10()
            {
                // Offset:<474.5412, 469.20422>, Rotation:-0.008102100937574169 degrees,
                // Scale:<0.60938, 0.60938>
                var result = CreateSpriteShape(PathGeometry_10(), new Matrix3x2(0.609380007F, 0F, 0F, 0.609380007F, 474.541199F, 469.204224F), _colorBrush_AlmostYellowGreen_FF90CD4A);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_11()
            {
                // Offset:<360.1947, 258.57507>, Rotation:-0.008102100937574169 degrees,
                // Scale:<0.60938, 0.60938>
                var result = CreateSpriteShape(PathGeometry_11(), new Matrix3x2(0.609380007F, 0F, 0F, 0.609380007F, 360.194702F, 258.575073F), _colorBrush_AlmostYellowGreen_FF90CD4A);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_12()
            {
                // Offset:<259.71768, 449.8991>, Rotation:-0.008102100937574169 degrees,
                // Scale:<0.60938, 0.60938>
                var result = CreateSpriteShape(PathGeometry_12(), new Matrix3x2(0.609380007F, 0F, 0F, 0.609380007F, 259.717682F, 449.899109F), ColorBrush_AlmostYellowGreen_FF80C536());
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_13()
            {
                // Offset:<392.1786, 255.321>, Rotation:-0.008102100937574169 degrees,
                // Scale:<0.60938, 0.60938>
                var result = CreateSpriteShape(PathGeometry_13(), new Matrix3x2(0.609380007F, 0F, 0F, 0.609380007F, 392.178589F, 255.320999F), _colorBrush_AlmostYellowGreen_FF90CD4A);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_45_to_405()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 45F, HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.98888886F, 405F, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(800F, 800F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape());
                // Scale:0.60938,0.60938, Offset:<144, 144>
                shapes.Add(SpriteShape_07());
                // Scale:0.60938,0.60938, Offset:<144, 144>
                shapes.Add(SpriteShape_08());
                // Scale:0.60938,0.60938, Offset:<144, 144>
                shapes.Add(SpriteShape_09());
                // Scale:0.60938,0.60938, Offset:<144, 144>
                shapes.Add(SpriteShape_10());
                // Scale:0.60938,0.60938, Offset:<144, 144>
                shapes.Add(SpriteShape_11());
                // Scale:0.60938,0.60938, Offset:<144, 144>
                shapes.Add(SpriteShape_12());
                // Scale:0.60938,0.60938, Offset:<144, 144>
                shapes.Add(SpriteShape_13());
                return result;
            }

            // - - Layer aggregator
            // RotationAngleInDegrees
            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            internal AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(800F, 800F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
